import React from 'react';
import './TileSlider.css';
export declare const CYCLE_MODE_STOP = "stop";
export declare const CYCLE_MODE_RESTART = "restart";
export declare const CYCLE_MODE_ENDLESS = "endless";
export type CycleMode = 'stop' | 'restart' | 'endless';
export type RenderTile<T> = (item: T, isInView: boolean, listIndex: number, renderKey: string, slide?: (direction: Direction) => void) => React.ReactElement;
export type RenderControl = (props: ControlProps) => React.ReactElement;
export type ControlProps = {
    onClick: () => void;
    disabled: boolean;
};
type Direction = 'left' | 'right';
export type TileSliderProps<T> = {
    items: T[];
    cycleMode?: CycleMode;
    tilesToShow?: number;
    spacing?: number;
    minimalTouchMovement?: number;
    showControls?: boolean;
    showDots?: boolean;
    animated?: boolean;
    wrapWithEmptyTiles?: boolean;
    transitionTime?: string;
    transitionTimingFunction?: string;
    className?: string;
    pageStep?: 'page' | 'tile';
    renderTile: RenderTile<T>;
    renderLeftControl?: RenderControl;
    renderRightControl?: RenderControl;
    passiveEventlistener?: boolean;
    renderPaginationDots?: (index: number, pageIndex: number) => JSX.Element;
    renderAriaLabel?: (item: T, index: number, key: string, total: number) => string;
    onSwipeStart?: () => void;
    onSwipeEnd?: () => void;
    onSlideEnd?: () => void;
    overscan?: number;
    throttleOnTransition?: boolean;
};
declare const TileSlider: <T>({ items, tilesToShow, cycleMode, spacing, minimalTouchMovement, showControls, animated, transitionTime, transitionTimingFunction, wrapWithEmptyTiles, showDots, pageStep, renderTile, renderLeftControl, renderRightControl, renderPaginationDots, renderAriaLabel, className, onSwipeStart, onSwipeEnd, onSlideEnd, overscan, throttleOnTransition, }: TileSliderProps<T>) => React.JSX.Element;
export { TileSlider };
